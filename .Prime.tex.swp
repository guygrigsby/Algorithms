\documentclass[11pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[english]{babel}
\usepackage{amssymb,amsmath,amsthm, mathtools}
\pagenumbering{Roman}

\title{\textbf{AKS Primality Test}}
\author{Guy J Grigsby}
\begin{document}
\maketitle
\vspace{2pc}
\section{Background}
The Agrawal-Kayal-Saxena primality test is a polonomial time algorithm that tests to see if a given number $n$ is prime. It's based on, what mathematicians call, elementary number theory so I will do my best to fumble through it. The first and possibly most of important part of this is Fermat's Little Theorum. This theorum tells us that if $p$ is a prime number, then for any integer $a$, $(a^p - a)$ is divisible by $p$. Put another way:
	
\newtheorem{thm}{Theorum}\label{fermat}
\begin{thm}[Fermat's Little Theorum]
If $p$ is prime:
\begin{equation}
a^p \equiv a\ (mod\ p)
\end{equation}
\end{thm}

This is all very interesting, but alone, this doesn't help us. There \emph{is} a primality test that uses this directly called Fermat's Primality Test, but it's not polinomial time and thus uninteresting. Fermat's Little Theorum must be extended to polinomials instead of only constant values.

\newtheorem{lemma}{Lemma}\label{congruencyLemma}
\begin{lemma}
If $n$ is prime then for all integers $m$:
\begin{equation}
(x-m)^n \equiv (x^n -m)\ mod\ n
\end{equation}
\end{lemma}

I am not going to prove these here so you'll have to take my word for it, or look it up in the text. \footnote{"Foundations of Algorithms" by Neopolitan and Naimipour (page 460) can be found in Jerry's office. Most of the examples contained herein are also stolen from this book.} It should be noted that this lemma can also be used to prove primality, but it does so in exponential time. A natural extension to this lemma is to claim, as I will now, that if $m$ and $n$ are relatively prime then $n$ is prime if and only if 

$$(x-m)^n \equiv (x^n -m)\ mod\ n$$

Now this may look like I just wrote the same thing again to fill space. That is not completely true. I did write it again and it did take up more space, but it was for another reason. Emphasis. This is the basis of the AKS primality test. Before looking at an example we must first define the congruency operator $\equiv$ and how the $mod$ operator works on polunomials. We are used to working with $mod$ on integers and it behaves much the same way, but some clarification is needed. 

\newtheorem{definition}{Definition}
\begin{definition}
Let f(x) and g(x) be polynomials  that have integer coefficients. If the coefficients of each magintude of x are congruent mod n, then it can be said that f(x) and g(x) are congurent mod n. This can also be expressed as follows:

$$f(x) \equiv g(x)\ mod\ n$$
 
\end{definition}

In the above relationship, $f(x)$ and $g(x)$ are in the same equivalence class. The congruence relation operator $\equiv$ is way we compare polynomials in a modular way. It is used in place of the more familiar style for integers $ 9\ mod\ 2 = 1 $. Lets look at a basic example of polynomial congruence.

$$(6x^2+9x+1) \equiv (2x^2+x+3)\ mod\ 4$$ is true because
$$ 6 \equiv 2\ mod\ 4 $$
$$ 9 \equiv 1\ mod\ 4 $$
$$ 1 \equiv -3\ mod\ 4 $$
Thus the two polynomilas are equivalent.



\end{document}